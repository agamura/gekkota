AC_INIT(configure.in)
AM_INIT_AUTOMAKE(gekkota, 0.1)

AC_ISC_POSIX
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC
AC_CONFIG_MACRO_DIR([m4])
AM_PROG_LIBTOOL

AC_DEFINE(GEKKOTA_BUILDING_LIB)
AC_DEFINE(_GNU_SOURCE)

AC_EGREP_HEADER(MSG_MAXIOVLEN, /usr/include/sys/socket.h,
    AC_DEFINE(GEKKOTA_HOST_MAX_BUFFERS, [MSG_MAXIOVLEN]))
AC_EGREP_HEADER(MSG_MAXIOVLEN, socket.h,
    AC_DEFINE(GEKKOTA_HOST_MAX_BUFFERS, [MSG_MAXIOVLEN]))

AC_CHECK_FUNC([poll], [AC_DEFINE(HAVE_POLL)])
AC_CHECK_FUNC([fcntl], [AC_DEFINE(HAVE_FCNTL)])

AC_CHECK_MEMBER([struct msghdr.msg_flags], [AC_DEFINE(HAVE_MSGHDR_FLAGS)], ,
    [#include <sys/socket.h>]
)

AC_CHECK_TYPE([socklen_t], [AC_DEFINE(HAVE_SOCKLEN_T)], , 
    #include <sys/types.h>
    #include <sys/socket.h>
)

AC_CHECK_TYPE([socket_t], [AC_DEFINE(HAVE_SOCKET_T)], , 
    #include <sys/types.h>
    #include <sys/socket.h>
)

AC_MSG_CHECKING([for native idn support])
AC_TRY_RUN([
#define _GNU_SOURCE
#include <netdb.h>
    int main() {
#ifdef AI_IDN
        return 0;
#else
        return 1;
#endif
    }], have_native_idn=yes, have_native_idn=no)
    if test "$have_native_idn" = "yes"; then
        AC_DEFINE(HAVE_NATIVE_IDN)
    fi
AC_MSG_RESULT([$have_native_idn])

AC_MSG_CHECKING(whether to use CRC32)
AC_ARG_ENABLE([crc32_enabled],
    [--enable-crc32 enable CRC32 packet verification],
    [case "$enableval" in
        yes) crc32_enabled=yes ;;
        no) crc32_enabled=no ;;
        *) AC_MSG_ERROR([bad value $enableval for --enable-crc32]) ;;
    esac], [crc32_enabled=no])
AC_MSG_RESULT([$crc32_enabled])
    
AM_CONDITIONAL([HAVE_NATIVE_IDN], [test "$have_native_idn" = "yes"])
AM_CONDITIONAL([CRC32_ENABLED], [test "$crc32_enabled" = "yes"])

AC_OUTPUT([
Makefile
src/Makefile
src/gekkota/Makefile
src/gekkota_test/Makefile
])
